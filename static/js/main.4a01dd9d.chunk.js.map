{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","capText","length","defaultProps","aboutText","App","setMode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a01dd9d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"\">\r\n          {props.title}\r\n        </a>\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li> */}\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ?  'dark' : 'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Your Title Here..\",\r\n  aboutText: \"Default about text\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"UpperCase Button is clicked by User...\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"UpperCase Button is clicked by User...\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleClear = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value = \"\");\r\n    props.showAlert(\"Text has been cleared!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed extra spaces!\", \"success\");\r\n  }\r\n\r\n  const handlecapClick = ()=>{\r\n    let capText = text.slice(0,1).toUpperCase() + text.slice(1, text.length)\r\n    setText(capText);\r\n    props.showAlert(\"First letter is converted to Capital!\", \"success\");\r\n}\r\n\r\n  const handleCopy = (event) => {\r\n    let text = document.getElementById('myTextArea');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text is copied to clipboard!\", \"success\");\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"randoenbjkdcfcv\"; // Wrong way to chage the value of text:) we can change text directly\r\n  // setText(\"This the way to set text\"); // Need to call the second parameter that is function\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode === 'dark' ?  'white' : '#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        {/* <label for=\"myTextBox\" className=\"form-label\">Example textarea</label> */}\r\n        <textarea\r\n          className=\"form-control my-4\"\r\n          style={{backgroundColor: props.mode === 'light' ?  'white' : 'grey', color: props.mode === 'dark' ?  'white' : '#042743'}}\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          id=\"myTextArea\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"text-center\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary  mx-3\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-3\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-3\"\r\n          onClick={handleClear}\r\n        >\r\n          Clear all\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-3\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-3\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Spaces\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-3\"\r\n          onClick={handlecapClick}\r\n        >\r\n          First Letter Capital\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode === 'dark' ?  'white' : '#042743'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes to read.</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length > 0 ? text : \"Enter Something in the textbox to preview here.\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing';\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now!!!';\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not.\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n        </div>\n      {/* </Router>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}